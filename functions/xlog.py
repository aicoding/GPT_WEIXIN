import requests
from .date import date_convertion
from .file import generate_charts_file,draw_chart_image
import json
import chainlit as cl
import matplotlib.pyplot as plt

#XLOG接口地址
XLOG_API_DOMAIN = "http://xlog.t.17usoft.com"
#XLOG接口请求header
XLOG_API_HEADERS = {
    "Accept": "application/json",
    "spec-x-auth-token": "8edb687de7e94c71a43ee22b2a964cd7"
}

async def test_xlog():
    # my_list = [1, 2, 3, 4, 5]
    # elments = []
    # actions = []
    # for item in my_list:
    #     # metric = "指标名称:"+item['metricNameCn']+";指标ID:"+str(item['id'])+";指标条件:"+item['metricCondition']
    #     fig, ax = plt.subplots()
    #     ax.plot([1, 2, 3, 4], [1, 4, 2, 3])

    #     elements = [cl.Pyplot(name="plot", figure=fig, display="inline")]

    #     metric = "指标名称:test;指标ID:"+str(item)
    #     elments.append(cl.Text(content=metric,display="inline"))
    #     actions.append(cl.Action(name="action_button",label=metric, value="example_value", description="Click me!"))    
    # await cl.Message(content="查找到以下相关指标：",elements=elements).send()
    data = {
        "code": 200,
        "content": {
            "x": [
                "2023-08-22 00:00:00",
                "2023-08-22 00:05:00",
                "2023-08-22 00:10:00",
                "2023-08-22 00:15:00",
                "2023-08-22 00:20:00",
                "2023-08-22 00:25:00",
                "2023-08-22 00:30:00",
                "2023-08-22 00:35:00",
                "2023-08-22 00:40:00",
                "2023-08-22 00:45:00",
                "2023-08-22 00:50:00",
                "2023-08-22 00:55:00",
                "2023-08-22 01:00:00",
                "2023-08-22 01:05:00",
                "2023-08-22 01:10:00",
                "2023-08-22 01:15:00",
                "2023-08-22 01:20:00",
                "2023-08-22 01:25:00",
                "2023-08-22 01:30:00",
                "2023-08-22 01:35:00",
                "2023-08-22 01:40:00",
                "2023-08-22 01:45:00",
                "2023-08-22 01:50:00",
                "2023-08-22 01:55:00",
                "2023-08-22 02:00:00",
                "2023-08-22 02:05:00",
                "2023-08-22 02:10:00",
                "2023-08-22 02:15:00",
                "2023-08-22 02:20:00",
                "2023-08-22 02:25:00",
                "2023-08-22 02:30:00",
                "2023-08-22 02:35:00",
                "2023-08-22 02:40:00",
                "2023-08-22 02:45:00",
                "2023-08-22 02:50:00",
                "2023-08-22 02:55:00",
                "2023-08-22 03:00:00",
                "2023-08-22 03:05:00",
                "2023-08-22 03:10:00",
                "2023-08-22 03:15:00",
                "2023-08-22 03:20:00",
                "2023-08-22 03:25:00",
                "2023-08-22 03:30:00",
                "2023-08-22 03:35:00",
                "2023-08-22 03:40:00",
                "2023-08-22 03:45:00",
                "2023-08-22 03:50:00",
                "2023-08-22 03:55:00",
                "2023-08-22 04:00:00",
                "2023-08-22 04:05:00",
                "2023-08-22 04:10:00",
                "2023-08-22 04:15:00",
                "2023-08-22 04:20:00",
                "2023-08-22 04:25:00",
                "2023-08-22 04:30:00",
                "2023-08-22 04:35:00",
                "2023-08-22 04:40:00",
                "2023-08-22 04:45:00",
                "2023-08-22 04:50:00",
                "2023-08-22 04:55:00",
                "2023-08-22 05:00:00",
                "2023-08-22 05:05:00",
                "2023-08-22 05:10:00",
                "2023-08-22 05:15:00",
                "2023-08-22 05:20:00",
                "2023-08-22 05:25:00",
                "2023-08-22 05:30:00",
                "2023-08-22 05:35:00",
                "2023-08-22 05:40:00",
                "2023-08-22 05:45:00",
                "2023-08-22 05:50:00",
                "2023-08-22 05:55:00",
                "2023-08-22 06:00:00",
                "2023-08-22 06:05:00",
                "2023-08-22 06:10:00",
                "2023-08-22 06:15:00",
                "2023-08-22 06:20:00",
                "2023-08-22 06:25:00",
                "2023-08-22 06:30:00",
                "2023-08-22 06:35:00",
                "2023-08-22 06:40:00",
                "2023-08-22 06:45:00",
                "2023-08-22 06:50:00",
                "2023-08-22 06:55:00",
                "2023-08-22 07:00:00",
                "2023-08-22 07:05:00",
                "2023-08-22 07:10:00",
                "2023-08-22 07:15:00",
                "2023-08-22 07:20:00",
                "2023-08-22 07:25:00",
                "2023-08-22 07:30:00",
                "2023-08-22 07:35:00",
                "2023-08-22 07:40:00",
                "2023-08-22 07:45:00",
                "2023-08-22 07:50:00",
                "2023-08-22 07:55:00",
                "2023-08-22 08:00:00",
                "2023-08-22 08:05:00",
                "2023-08-22 08:10:00",
                "2023-08-22 08:15:00",
                "2023-08-22 08:20:00",
                "2023-08-22 08:25:00",
                "2023-08-22 08:30:00",
                "2023-08-22 08:35:00",
                "2023-08-22 08:40:00",
                "2023-08-22 08:45:00",
                "2023-08-22 08:50:00",
                "2023-08-22 08:55:00",
                "2023-08-22 09:00:00",
                "2023-08-22 09:05:00",
                "2023-08-22 09:10:00",
                "2023-08-22 09:15:00",
                "2023-08-22 09:20:00",
                "2023-08-22 09:25:00",
                "2023-08-22 09:30:00",
                "2023-08-22 09:35:00",
                "2023-08-22 09:40:00",
                "2023-08-22 09:45:00",
                "2023-08-22 09:50:00",
                "2023-08-22 09:55:00",
                "2023-08-22 10:00:00"
            ],
            "today": [
                2337,
                2364,
                2271,
                2277,
                2198,
                2242,
                2053,
                1987,
                1968,
                1916,
                1836,
                1741,
                1739,
                1719,
                1672,
                1556,
                1489,
                1396,
                1400,
                1307,
                1252,
                1146,
                1249,
                1156,
                1104,
                1118,
                986,
                1015,
                1009,
                976,
                919,
                925,
                851,
                793,
                792,
                760,
                718,
                721,
                638,
                617,
                633,
                633,
                582,
                622,
                557,
                522,
                482,
                459,
                435,
                424,
                401,
                357,
                412,
                409,
                397,
                348,
                336,
                356,
                345,
                320,
                333,
                310,
                312,
                308,
                298,
                257,
                340,
                321,
                293,
                305,
                322,
                277,
                634,
                543,
                540,
                505,
                515,
                549,
                520,
                548,
                569,
                570,
                646,
                604,
                682,
                666,
                755,
                739,
                806,
                808,
                922,
                848,
                935,
                917,
                961,
                1059,
                1058,
                1061,
                1220,
                1173,
                1208,
                1243,
                1325,
                1326,
                1446,
                1470,
                1436,
                1540,
                1716,
                1843,
                1888,
                1827,
                1917,
                1954,
                1964,
                1958,
                1860,
                2015,
                1918,
                1910,
                0
            ],
            "dod": [
                2178,
                2121,
                2127,
                2149,
                2070,
                1972,
                1902,
                1827,
                1755,
                1701,
                1712,
                1637,
                1567,
                1536,
                1480,
                1402,
                1301,
                1268,
                1327,
                1272,
                1223,
                1124,
                1082,
                1063,
                1038,
                948,
                909,
                977,
                862,
                850,
                839,
                777,
                754,
                757,
                685,
                703,
                693,
                680,
                642,
                589,
                577,
                520,
                519,
                519,
                456,
                443,
                440,
                412,
                396,
                428,
                331,
                336,
                307,
                326,
                317,
                297,
                312,
                276,
                265,
                272,
                261,
                261,
                252,
                267,
                281,
                263,
                260,
                267,
                267,
                276,
                274,
                236,
                476,
                472,
                423,
                464,
                410,
                445,
                492,
                468,
                528,
                467,
                523,
                547,
                592,
                633,
                648,
                615,
                704,
                606,
                736,
                756,
                783,
                824,
                901,
                915,
                965,
                931,
                1017,
                1026,
                1062,
                1079,
                1118,
                1221,
                1195,
                1249,
                1274,
                1312,
                1418,
                1428,
                1417,
                1461,
                1419,
                1491,
                1586,
                1536,
                1555,
                1564,
                1610,
                1644,
                0
            ],
            "wow": [
                2176,
                2221,
                2158,
                2145,
                1897,
                1888,
                1881,
                1851,
                1731,
                1611,
                1595,
                1622,
                1537,
                1435,
                1365,
                1326,
                1309,
                1230,
                1217,
                1137,
                1114,
                1084,
                1002,
                1016,
                1028,
                896,
                899,
                852,
                855,
                764,
                761,
                730,
                680,
                663,
                618,
                614,
                639,
                672,
                617,
                537,
                494,
                484,
                416,
                436,
                416,
                366,
                375,
                379,
                402,
                372,
                368,
                342,
                344,
                320,
                293,
                266,
                244,
                293,
                251,
                236,
                247,
                230,
                238,
                222,
                258,
                233,
                254,
                216,
                252,
                251,
                232,
                225,
                485,
                460,
                460,
                454,
                440,
                423,
                451,
                459,
                425,
                491,
                508,
                532,
                590,
                581,
                618,
                632,
                687,
                681,
                714,
                762,
                787,
                858,
                862,
                844,
                875,
                912,
                1014,
                1077,
                1112,
                1086,
                1137,
                1147,
                1152,
                1121,
                1191,
                1289,
                1285,
                1365,
                1364,
                1526,
                1423,
                1476,
                1474,
                1549,
                1542,
                1565,
                1569,
                1557,
                0
            ]
        },
        "ext2": "{\"createTime\":1678726943000,\"createUser\":\"jun.ma1\",\"id\":8657,\"idAsc\":false,\"label\":\"演练 - 小程序订单\",\"length\":0,\"metricCondition\":\"url:\\\"https://xapi.elong.com/api/core/createorder/postorder/\\\" AND errorCode:\\\"200\\\" \",\"metricDimension\":0,\"metricGroup\":\"METRIC_XCX_TYPE\",\"metricImportant\":5,\"metricNameCn\":\"演练 - 小程序订单\",\"metricNameEn\":\"downgrade_xcx_order\",\"metricOrder\":0,\"metricPage\":\"XCX_2_H5\",\"metricScheduleDimension\":300,\"metricSource\":\"xapi_front*\",\"metricStatistical\":\"key_id\",\"metricStatisticsType\":\"count\",\"metricSubStatistical\":\"key_id\",\"metricTop\":10,\"metricType\":\"es\",\"start\":0,\"updateTime\":1678726943000,\"updateUser\":\"jun.ma1\",\"value\":\"downgrade_xcx_order\"}",
        "serverIp": "172.26.45.140"
    }
    image_url = draw_chart_image(data['content'])
    elments = []
    metricId = 1111
    totalStr = "11111"
    tmp_image = cl.Image(name=f"image{metricId}",path=image_url.strip(),display="inline")
    tmp_image.size = "large"
    elments.append(tmp_image)
    file_url = generate_charts_file(data['content'])
    await cl.Message(content="数据汇总:"+totalStr+"\n echarts地址:"+file_url,elements=elments).send()

#请求指标配置列表
async def query_metric_config_list_from_xlog(metricName: str):
    # """
    # If the user's question mentions the need to search metric config list from the xlog, you can call this function.
    # Parameters:
    #     metricName: The metricName statement.(required)
    # """
    try:
        if metricName == '':
            return {"status": "false", "error": "请输入指标名称"}
        url = XLOG_API_DOMAIN + "/admin/middle/metric/config/list?metricNameCn=" + metricName
        print(f"url==={url}")
        response = requests.get(url, headers = XLOG_API_HEADERS)

        if response.status_code != 200:
            raise Exception("Non-200 response: " + str(response.text))
        response_json = response.json()
        if response_json['code'] != 200:
            raise Exception("Non-200 response: " + str(response_json['msg']))

        response_data = response_json['content']
        if(response_data):
             response_data = [item for item in response_data if item['metricGroup'] != "sz_llpt" and item['metricGroup'] !="tapi_group"]
        return response_data
    except Exception as e:
        return {"status": "false", "error": str(e)}
    

async def query_metric_data_detail_from_xlog(metricId: int, start: str, end: str, interval:str):
    # """
    # If the user's question mentions the need to get metric data detail from the xlog, you can call this function.
    # Parameters:
    #     metricId: The metricId statement.(required)
    #     start: The start date statement.(required)
    #     end: The end date statement.(required)
    #     interval: The interval statement.(required)
    # """
    try:
        startDate = date_convertion(start)
        endDate = date_convertion(end)
        if startDate == '' or endDate == '':
            raise Exception("Date format error: start=" + start + "&end=" + end)
        if (startDate.startswith('2023-')== False or endDate.startswith('2023-') == False):
            return {"status": "false", "Description": "需要给个时间段", "error":"Date format error: start=" + start + "&end=" + end}
        # if(interval=='' or interval.endswith("m")== False or interval.endswith("h")== False or interval.endswith("d")== False):
            interval = "5m"
        data = {
            "metricId": metricId,
            "interval": interval,
            "searchType": "histogram",
            "days": 2,
            "start": startDate,
            "end": endDate
        }
        print(data)
        # return {"status": "false", "data": data}
        response = requests.post(XLOG_API_DOMAIN + "/admin/metric/search",headers = XLOG_API_HEADERS,data = json.dumps(data))
        response_json = response.json()
        if response_json['code'] != 200:
            raise Exception("Non-200 response: " + str(response_json['msg']))

        response_json = response.json()
 
        response_data = {
            'x':response_json['content']['x'],
            'today':response_json['content']['today'],
            'dod':response_json['content']['dod'],
            'wow':response_json['content']['wow'],
        }
        file_url = generate_charts_file(response_data)
        return file_url
        # return create_echarts(response_data)
    except Exception as e:
        return {"status": "false", "error": str(e)}